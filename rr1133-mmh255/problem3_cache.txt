print(bottom_right, top_right, top_left, bottom_left)

print(np.linalg.norm(bottom_right - center_point) * 2)
print(np.linalg.norm(top_right - center_point) * 2)
print(np.linalg.norm(top_left - center_point) * 2)
print(np.linalg.norm(bottom_left - center_point) * 2)

print("------------------------------------------------")

print(np.linalg.norm(bottom_right - top_right))
print(np.linalg.norm(top_right - top_left))
print(np.linalg.norm(top_left - bottom_left))
print(np.linalg.norm(bottom_left - bottom_right))

print("------------------------------------------------")

slope1 = (top_right[1] - bottom_right[1]) / (top_right[0] - bottom_right[0])
slope2 = (bottom_left[1] - bottom_right[1]) / (bottom_left[0] - bottom_right[0])
print(f"{slope1}, {slope2}, {slope1 * slope2}")

slope1 = (top_left[1] - bottom_left[1]) / (top_left[0] - bottom_left[0])
slope2 = (bottom_right[1] - bottom_left[1]) / (bottom_right[0] - bottom_left[0])
print(f"{slope1}, {slope2}, {slope1 * slope2}")

slope1 = (top_right[1] - top_left[1]) / (top_right[0] - top_left[0])
slope2 = (bottom_left[1] - top_left[1]) / (bottom_left[0] - top_left[0])
print(f"{slope1}, {slope2}, {slope1 * slope2}")

slope1 = (top_left[1] - top_right[1]) / (top_left[0] - top_right[0])
slope2 = (bottom_right[1] - top_right[1]) / (bottom_right[0] - top_right[0])
print(f"{slope1}, {slope2}, {slope1 * slope2}")

print("------------------------------------------------")


# Function to update the rectangle's rotation angle
def update(frame):
    # Clear the previous plot
    ax.clear()

    # Update the rotation angle and point of reference for rotation
    rec0.angle = frame
    rec0.rotation_point = 'center'

    # Add the updated rectangle to the axes
    ax.add_patch(rec0)

    # Set axis limits
    ax.set_xlim(0,6)
    ax.set_ylim(-1,4)

    # Set title
    ax.set_title(f'Frame: {frame}')

    return rec0,

# animation = FuncAnimation(f, update, frames=np.arange(0, 360, 10), interval=100, blit=True)
